import logging
import subprocess
import sys
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from io import BytesIO
from PIL import Image, ImageDraw
import random

# URL —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Render
RENDER_URL = "https://telegram-bot.onrender.com"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL

def keep_awake():
    while True:
        try:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É –∂–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É
            response = requests.get(RENDER_URL)
            print(f"‚úÖ –ë—É–¥–∏–ª—å–Ω–∏–∫: ping {RENDER_URL} | –°—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –ë—É–¥–∏–ª—å–Ω–∏–∫: –æ—à–∏–±–∫–∞: {e}")
        # –ñ–¥—ë–º 14 –º–∏–Ω—É—Ç (840 —Å–µ–∫—É–Ω–¥)
        time.sleep(840)  # 14 –º–∏–Ω—É—Ç ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ (–º–µ–Ω—å—à–µ 15)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫ –≤ —Ñ–æ–Ω–µ
threading.Thread(target=keep_awake, daemon=True).start()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
subprocess.check_call([sys.executable, "-m", "pip", "install", "python-telegram-bot", "Pillow", "Flask"])

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ----------------------------
# üé≤ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–†–¢–´
# ----------------------------

def generate_board():
    board = [{"color": "start", "type": "start"}]  # —è—á–µ–π–∫–∞ 0

    for i in range(1, 100):
        cell = {}

        if i < 70:
            cell["color"] = random.choices(["green", "yellow"], weights=[80, 20])[0]
        elif i < 80:
            cell["color"] = random.choices(["green", "yellow", "red"], weights=[40, 40, 20])[0]
        else:
            cell["color"] = random.choices(["red", "yellow", "green"], weights=[70, 20, 10])[0]

        if cell["color"] == "green":
            cell["type"] = "phrase"
        elif cell["color"] == "yellow":
            cell["type"] = "challenge"
        elif cell["color"] == "red":
            cell["type"] = "sexy_challenge"

        board.append(cell)

    # –õ–æ–≤—É—à–∫–∏
    trap1 = random.randint(15, 85)
    trap2 = random.randint(15, 85)
    while trap2 == trap1:
        trap2 = random.randint(15, 85)

    board[trap1] = {"color": "blue", "type": "back7", "text": "üåÄ –õ–æ–≤—É—à–∫–∞! –û—Ç–∫–∞—Ç –Ω–∞ 7 —à–∞–≥–æ–≤!"}
    board[trap2] = {"color": "purple", "type": "back5", "text": "‚ö†Ô∏è –ú–∞–≥–∏—è –ø—Ä–æ–≤–∞–ª–∞! –û—Ç–∫–∞—Ç –Ω–∞ 5 —à–∞–≥–æ–≤!"}

    # ‚õìÔ∏è –¢—é—Ä—å–º–∞
    prison = random.randint(20, 90)
    while prison in [trap1, trap2]:
        prison = random.randint(20, 90)
    board[prison] = {
        "color": "black",
        "type": "prison",
        "text": "‚õìÔ∏è –¢—é—Ä—å–º–∞! –ü—Ä–æ–ø—É—Å—Ç–∏ —Ö–æ–¥ –∏ —Å–Ω–∏–º–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –æ–¥–µ–∂–¥—ã!"
    }

    # üéÅ –ü–æ–¥–∞—Ä–æ–∫
    gift = random.randint(30, 95)
    while gift in [trap1, trap2, prison]:
        gift = random.randint(30, 95)
    board[gift] = {
        "color": "gold",
        "type": "gift",
        "text": "üéÅ –ü–æ–¥–∞—Ä–æ–∫! –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ 1000 —Ä—É–±–ª–µ–π –Ω–∞ —Å—á–µ—Ç –æ—Ç –ë–æ—Ä–∏—Å–∞!"
    }

    # üå™Ô∏è –•–∞–æ—Å (2 —è—á–µ–π–∫–∏)
    chaos_positions = []
    for _ in range(2):
        pos = random.randint(40, 95)
        while pos in [trap1, trap2, prison, gift] + chaos_positions:
            pos = random.randint(40, 95)
        chaos_positions.append(pos)
        board[pos] = {
            "color": "purple",
            "type": "chaos",
            "text": "üåÄ –•–∞–æ—Å! –°–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç!"
        }

    return board

BOARD = generate_board()

# ----------------------------
# üìö –ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –Ø–ß–ï–ï–ö
# ----------------------------

PHRASES_GREEN = [
"–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç, –ø–æ–∫–∞ –Ω–µ —Ä–∞—Å—Å–º–µ—ë—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä",
"–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å–∞–º–æ–π —Å–º–µ—à–Ω–æ–π —à–∫–æ–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π",
"–ù–∞–∑–æ–≤–∏ —Ç—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω–∏—à—å –≤ –ª—é–¥—è—Ö",
"–ß—Ç–æ –±—ã —Ç—ã –≤–∑—è–ª(–∞) —Å —Å–æ–±–æ–π –Ω–∞ –Ω–µ–æ–±–∏—Ç–∞–µ–º—ã–π –æ—Å—Ç—Ä–æ–≤?",
"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∞–º–æ–º –Ω–µ–ª–æ–≤–∫–æ–º –º–æ–º–µ–Ω—Ç–µ –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏",
"–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥(–ª–∞) —Å—Ç–∞—Ç—å –∫–µ–º —É–≥–æ–¥–Ω–æ –Ω–∞ –¥–µ–Ω—å ‚Äî –∫–µ–º –±—ã –≤—ã–±—Ä–∞–ª(–∞)?",
"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∞–º–æ–º –≤–∫—É—Å–Ω–æ–º –±–ª—é–¥–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –ø—Ä–æ–±–æ–≤–∞–ª(–∞)",
"–ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª(–∞), –µ—Å–ª–∏ –±—ã –≤—ã–∏–≥—Ä–∞–ª(–∞) –º–∏–ª–ª–∏–æ–Ω?",
"–ö–∞–∫–æ–π —Å–∞–º—ã–π –±–µ–∑—É–º–Ω—ã–π –ø–æ—Å—Ç—É–ø–æ–∫ —Ç—ã —Å–æ–≤–µ—Ä—à–∞–ª(–∞)?",
"–ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª(–∞), –µ—Å–ª–∏ –±—ã –±—ã–ª(–∞) –Ω–µ–≤–∏–¥–∏–º—ã–º(–æ–π) –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å?",
"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ª—é–±–≤–∏",
"–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –∑–∞–ø–∞—Ö?",
"–ß—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –±–µ–∑ —É–ª—ã–±–∫–∏?",
"–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–µ–±–µ?",
"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∞–º–æ–º –Ω–µ–æ–±—ã—á–Ω–æ–º —Å–Ω–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–Ω–∏—à—å",
"–ò–∑–æ–±—Ä–∞–∑–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ, –ø–æ–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ —É–≥–∞–¥–∞–µ—Ç",
"–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–≥—Ä—É, —Å–∏–¥—è –Ω–∞ –∫–æ—Ä—Ç–æ—á–∫–∞—Ö",
"–ì–æ–≤–æ—Ä–∏ —à–µ–ø–æ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏–µ 3 —Ö–æ–¥–∞",
"–°–¥–µ–ª–∞–π 5 –æ—Ç–∂–∏–º–∞–Ω–∏–π –∏–ª–∏ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
"–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –¥–µ–ª–∞–ª –≤—á–µ—Ä–∞ –≤–µ—á–µ—Ä–æ–º",
"–°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—É",
"–ü—Ä–∏–∑–Ω–∞–π—Å—è –≤ —Å–∞–º–æ–º —Å–º–µ—à–Ω–æ–º —Å–µ–∫—Ä–µ—Ç–µ",
"–ü–æ–∫–∞–∂–∏ —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ",
"–°–∫–∞–∂–∏: –¢—ã —Å–∞–º—ã–π —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ",
"–í—ã–ø–µ–π –∑–∞–ª–ø–æ–º —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏–ª–∏ –∞–ª–∫–æ–≥–æ–ª—è",
"–†–∞—Å—Å–∫–∞–∂–∏ —Å—Ç—ã–¥–Ω—É—é –∏–ª–∏ –Ω–µ–ª–µ–ø—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –∂–∏–∑–Ω–∏",
"–ù–∞–¥–µ–Ω—å 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–¥–µ–∂–¥—ã",
"–ù–∞–¥–µ–Ω—å 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–µ–∂–¥—ã",
"–¢–∞–Ω—Ü—É–π –ø–æ–¥ –º—É–∑—ã–∫—É",
"–û–±—ä—è—Å–Ω–∏ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏—à–µ–¥—à–µ–µ –Ω–∞ —É–º —Å–ª–æ–≤–æ –∂–µ—Å—Ç–∞–º–∏ —Ä—É–∫ –∏–ª–∏ —Ç–µ–ª–æ–º",
"–ü–æ–¥–µ—Ä–∂–∏ –ø–æ–ª –º–∏–Ω—É—Ç—ã –≤–æ —Ä—Ç—É –ª–µ–¥ –∏–ª–∏ –≤–æ–¥—É",
"–ü–µ—Ä–µ–¥–∞–π –≤ –≥—É–±–∞—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—É –µ–¥—É",
"–ü—Ä–æ—à–µ–ø—á–∏ –Ω–∞ —É—Ö–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É –ø—Ä–∏—è—Ç–Ω—ã–µ —Å–ª–æ–≤–∞",
"–°–Ω–∏–º–∏ 1 —ç–ª–µ–º–µ–Ω—Ç –æ–¥–µ–∂–¥—ã",
"–û–±–ª–∏–∂–∏ –≥—É–±—ã —Å–µ–∫—Å—É–∞–ª—å–Ω–æ –≥–ª—è–¥—è –ø–∞—Ä—Ç–Ω–µ—Ä—É –≤ –≥–ª–∞–∑–∞",
"–ì–æ–≤–æ—Ä–∏ 1 —Ö–æ–¥ —Å –≤—ã—Å—É–Ω—É—Ç—ã–º —è–∑—ã–∫–æ–º",
"–ù–∞—Ä–∏—Å—É–π —Å–µ–±–µ –º–æ–Ω–æ–±—Ä–æ–≤—å",
"–í—Å—Ç–∞–Ω—å –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –≤ –ø–ª–∞–Ω–∫—É",
"–ö–æ–ø–∏—Ä—É–π –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
"–ö–∞—á–Ω–∏ –ø—Ä–µ—Å—Å 5 —Ä–∞–∑",
"–ü—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —Ç—ã –Ω–∏—â–∏–π, –≤—ã–ø—Ä–æ—Å–∏ –¥–µ–Ω–µ–≥ —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
"–ì–æ–≤–æ—Ä–∏ —Å–æ —Å—Ç—Ä–∞–Ω–Ω—ã–º –∞–∫—Ü–µ–Ω—Ç–æ–º",
"–ü–æ–∫–∞–∂–∏ —Å–≤–æ–µ –ª–∏—Ü–æ –≤–æ –≤—Ä–µ–º—è –æ—Ä–≥–∞–∑–º–∞",
"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ª—é–±–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
]

CHALLENGES_YELLOW = [
"–†–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–Ω—è—Ç–∏—è —Å–µ–∫—Å–∞ –≤ –Ω–µ–æ–±—ã—á–Ω–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ —Ñ–∞–Ω—Ç–∞–∑–∏—é –æ —Å–µ–∫—Å–µ",
"–ü–æ—Ü–µ–ª—É–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —â—ë–∫—É",
"–û–±–Ω–∏–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥",
"–î–µ—Ä–∂–∏ —Ä—É–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ 30 —Å–µ–∫—É–Ω–¥, –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—è –∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞",
"–ü—Ä–æ—à–µ–ø—á–∏ –Ω–∞ —É—Ö–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É —á—Ç–æ-—Ç–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ",
"–°–¥–µ–ª–∞–π –º–∞—Å—Å–∞–∂ –ø–ª–µ—á –ø–∞—Ä—Ç–Ω–µ—Ä—É 30 —Å–µ–∫—É–Ω–¥",
"–ü–æ–º–µ–Ω—è–π—Å—è —Ñ—É—Ç–±–æ–ª–∫–æ–π —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).",
"–°—ã–≥—Ä–∞–π –≤ ¬´–ü—Ä–∞–≤–¥—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ¬ª –æ–¥–∏–Ω —Ä–∞—É–Ω–¥",
"–ü–æ—Ü–µ–ª—É–π –ø–∞–ª—å—Ü—ã —Ä—É–∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É",
"–°–Ω–∏–º–∏ 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–¥–µ–∂–¥—ã",
"–ü–æ—Ü–µ–ª—É–π —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º —Å —è–∑—ã–∫–æ–º",
"–°–Ω–∏–º–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–µ–∂–¥—ã, –∫—Ä–æ–º–µ –¥–≤—É—Ö",
"–ü–æ—Ü–µ–ª—É–π –≤ —É—à–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
"–ü—Ä–∏—à–ª–∏ –∏–Ω—Ç–∏–º–Ω—É—é —Ñ–æ—Ç–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä—É",
"–ü–æ—Ü–µ–ª—É–π –ª—é–±—É—é —á–∞—Å—Ç—å —Ç–µ–ª–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
"–°–¥–µ–ª–∞–π –º–∞—Å—Å–∞–∂ —Ä—É–∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É",
"–ü–æ—Ü–µ–ª—É–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ 3 —Ä–∞–∑–Ω—ã–µ —É—á–∞—Å—Ç–∫–∞ —Ç–µ–ª–∞",
"–°–¥–µ–ª–∞–π –º–∞—Å—Å–∞–∂ —Å—Ç—É–ø–Ω–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—É",
"–°–¥–µ–ª–∞–π –º–∞—Å—Å–∞–∂ –≥–æ–ª–æ–≤—ã –ø–∞—Ä—Ç–Ω–µ—Ä—É",
"–®–ª–µ–ø–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –ø–æ–ø–∫–µ 3 —Ä–∞–∑–∞",
"–û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä—Ç–Ω–µ—Ä—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
"–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –≤ –≤–æ–∑–¥—É—Ö–µ —è–≥–æ–¥–∏—Ü–∞–º–∏",
"–í—Å–µ —Ü–µ–ª—É—é—Ç—Å—è —Å —è–∑—ã–∫–æ–º",
"–ü–∞—Ä—Ç–Ω–µ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª—é–±–æ–µ —Ç–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–æ–º–∞",
"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ª—é–±–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
"–û—Å—Ç–∞–≤—å –Ω–∞–¥–ø–∏—Å—å –Ω–∞ —Ç–µ–ª–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–æ–º",
"–ù–∞–±–µ—Ä–∏ –≤ —Ä–æ—Ç –≤–æ–¥—ã, –≤—Å—Ç–∞–Ω—å –Ω–∞–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏ –ø–æ–ø–∞–¥–∏ –µ–º—É –≤ —Ä–æ—Ç —ç—Ç–æ–π –≤–æ–¥–æ–π",
"–°–Ω–∏–º–∏ —Ç—Ä—É—Å–∏–∫–∏ –∏ –∏–≥—Ä–∞–π –±–µ–∑ –Ω–∏—Ö",
"–ü—Ä–∏–¥—É–º–∞–π —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
"–ü–∞—Ä—Ç–Ω–µ—Ä –º–µ–¥–ª–µ–Ω–Ω–æ —Ü–µ–ª—É–µ—Ç —Ç–µ–±—è –æ–ø—É—Å–∫–∞—è—Å—å –æ—Ç —à–µ–∏ –∫ –Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞",
"–û—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–æ–≤–æ–≥–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ —Å–µ–∫—Å–µ",
"–ù–∞–∑—ã–≤–∞–π—Ç–µ 3 –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö, –∞ –≤–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä –¥–æ–ª–∂–µ–Ω –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤–∞—Å –≤ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ–º—É—é —Å —ç—Ç–∏–º —á–∞—Å—Ç—å —Ç–µ–ª–∞",
"–û—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ –æ–±—Å—É–¥–∏—Ç–µ, –∫–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –ë–î–°–ú? –ß—Ç–æ –±—ã –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è?",
"–û–ø–∏—à–∏ —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –ø–æ—Å—Ç–µ–ª–∏",
"–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–≥–æ —Ç—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–µ—Å–Ω—è–ª—Å—è —Å–∫–∞–∑–∞—Ç—å –≤–æ –≤—Ä–µ–º—è —Å–µ–∫—Å–∞?",
"–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –≤–¥–≤–æ–µ–º –ø–æ–∑—É –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
"–û–±–Ω–∏–º–∏—Ç–µ—Å—å —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–π —Ä–∞–∑–ª—É–∫–∏",
"–°–¥–µ–ª–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ 5 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π, –¥–µ—Ä–∂–∞—Å—å –∑–∞ —Ä—É–∫–∏",
"–ü–æ–≥–ª–∞–¥—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –≥–æ–ª–æ–≤–µ –∫–∞–∫ –∫–æ—Ç—ë–Ω–∫–∞",
"–û–±–Ω–∏–º–∏—Ç–µ—Å—å –∏ —Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –ø–æ –æ–¥–Ω–æ–º—É –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—É",
"–û–±–Ω–∏–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–∑–∞–¥–∏",
"–ü–æ—Ü–µ–ª—É–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —à–µ—é",
"–ü—Ä–æ—à–µ–ø—á–∏ –Ω–∞ —É—Ö–æ: ¬´–Ø —Ö–æ—á—É —Ç–µ–±—è¬ª",
"–ü–æ—Ü–µ–ª—É–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –≥—É–±—ã 10 —Å–µ–∫—É–Ω–¥",
"–°–¥–µ–ª–∞–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –ø–æ—Ü–µ–ª—É–π",
"–°–∫–∞–∂–∏: ¬´–Ø —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –ø—Ä–∏–∫–æ—Å–Ω—É–ª—Å—è –∫–æ –º–Ω–µ –≤–æ—Ç –∑–¥–µ—Å—å‚Ä¶¬ª ‚Äî –ø–æ–∫–∞–∂–∏",
"–û–±–Ω–∏–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∏ –ø—Ä–∏–∂–º–∏ –∫ —Å—Ç–µ–Ω–µ, –∫–∞–∫ –≤ –∫–∏–Ω–æ",
"–°–∫–∞–∂–∏ —Ç—Ä–∏ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
"–ü–æ—Ü–µ–ª—É–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —É—Ö–æ",
"–ü–æ–ø—Ä–æ—Å–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–Ω—è—Ç—å —Å —Ç–µ–±—è —á—Ç–æ-—Ç–æ",
"–õ–æ–∂–∏—Ç–µ—Å—å –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ —Ü–µ–ª—É–π—Ç–µ—Å—å",
"–ü–æ–≥–ª–∞–¥—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ —Å–ø–∏–Ω–µ –ø–æ–¥ –æ–¥–µ–∂–¥–æ–π",
"–ü—Ä–∏–∑–Ω–∞–π—Å—è –≤ –∂–µ–ª–∞–Ω–∏–∏: —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
]

CHALLENGES_RED = [
"–ü–∞—Ä—Ç–Ω–µ—Ä —Ü–µ–ª—É–µ—Ç —Ç–µ–±–µ —Ä—É–∫–∏",
"–ü–∞—Ä—Ç–Ω–µ—Ä –¥–µ–ª–∞–µ—Ç –º–∞—Å—Å–∞–∂ –ª—é–±–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞",
"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ª—é–±–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
"–¢—ã —à–ª–µ–ø–∞–µ—à—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –ø–æ–ø–µ 10 —Ä–∞–∑",
"–°–¥–µ–ª–∞–π –ø–∞—Ä—Ç–Ω–µ—Ä—É –∫—É–Ω–∏ –∏–ª–∏ –º–∏–Ω–µ—Ç 3 –º–∏–Ω—É—Ç—ã",
"–ó–∞–Ω—è—Ç—å—Å—è –ª—é–±—ã–º –≤–∏–¥–æ–º —Å–µ–∫—Å–∞ –Ω–∞ –±–∞–ª–∫–æ–Ω–µ",
"–ï—Å–ª–∏ –Ω–∞ –∫—É–±–∏–∫–µ 1,2-—Å–µ–∫—Å –≤ –ø–∏—Å, 3,4-–∞–Ω–∞–ª, 5,6-–ú–∏–Ω–µ—Ç –∏–ª–∏ –ö—É–Ω–∏",
"–¢–µ–±–µ –≤—ã–ª–∏–∑—ã–≤–∞—é—Ç –∏ –æ–±—Å–∞—Å—ã–≤–∞—é—Ç –ø–∞–ª—å—Ü—ã –æ–¥–Ω–æ–π —Ä—É–∫–∏",
"–í–∫—É—Å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫! –ù–∞–º–∞–∂—å —á–µ–º-—Ç–æ —Å—ä–µ–¥–æ–±–Ω—ã–º –ø–æ–ª–æ–≤—ã–µ –æ—Ä–≥–∞–Ω—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ —Å–ª–∏–∂–∏ —ç—Ç–æ. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!",
"–ü–æ–∫–∞–∂–∏ –∫–∞–∫ –º–∞—Å—Ç—É—Ä–±–∏—Ä—É–µ—à—å",
"–í—Å—Ç–∞–≤—å –∞–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –∏–≥—Ä—É",
"–ó–æ–ª–æ—Ç–∞—è –æ—Å–µ–Ω—å! –ü–æ–ø–∏—Å–∞–π –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è",
"–ü–∞—Ä—Ç–Ω–µ—Ä –¥–µ–ª–∞–µ—Ç —Ç–µ–±–µ –∞–Ω–∏–ª–∏–Ω–≥—É—Å",
"–ó–∞–Ω—è—Ç—å—Å—è –≤–∞–≥–∏–Ω–∞–ª—å–Ω—ã–º —Å–µ–∫—Å–æ–º –Ω–∞ —Å—Ç–æ–ª–µ",
"–ó–∞–Ω—è—Ç—å—Å—è –∞–Ω–∞–ª—å–Ω—ã–º —Å–µ–∫—Å–æ–º",
"–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –º–∏–Ω–µ—Ç–∞",
"–¢—ã –∫—É—à–∞–µ—à—å –µ–¥—É —Å —á–ª–µ–Ω–∞ –∏–ª–∏ –∫–∏—Å–∫–∏",
"–ó–∞–Ω—è—Ç—å—Å—è –≤–∞–≥–∏–Ω–∞–ª—å–Ω—ã–º —Å–µ–∫—Å–æ–º, –≤—Å—Ç–∞–≤–∏–≤ –ø—Ä–∏ —ç—Ç–æ–º —á—Ç–æ-—Ç–æ –≤ –ø–æ–ø",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º –≤ –ª–∏—Ñ—Ç–µ",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º –≤ –≤–∞–Ω–Ω–æ–π",
"–ì—É–±–∞–º–∏ –ª–∞—Å–∫–∞–π –≥—Ä—É–¥—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
"–ü–æ–∏–≥—Ä–∞–π—Ç–µ –≤ —Å—Ç—Ä–æ–≥–æ–≥–æ —É—á–∏—Ç–µ–ª—è. –í—ã —É—á–∏—Ç–µ–ª—å, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä - —É—á–µ–Ω–∏–∫",
"–í—ã –¥–µ—Ç–µ–∫—Ç–∏–≤, –ø–∞—Ä—Ç–Ω–µ—Ä - –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π. –∑–¥–µ—Å—å –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –í—Ä–µ–º—è –≤—ã–±–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ",
"–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞. –¢—ã -—É—Å–ø–µ—à–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä-–±–æ–º–∂–∞—Ä–∞. –ü–µ—Ä–µ—Å–ø–∏ —Å —ç—Ç–∏–º –≥–æ–ª–æ–¥–Ω—ã–º –±–æ–º–∂–æ–º",
"–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞. –°–Ω–æ–≤–∞ –≤–≤–µ–ª–∏ —Ä–∞–±—Å—Ç–≤–æ –∏ —Ç—ã –∑–∞–≤–µ–ª —Å–µ–±–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–∞. –î–µ–ª–∞–π —Å –Ω–∏–º —á—Ç–æ —Ö–æ—á–µ—à—å, —Ä–∞–± –≤—Å–µ–≥–¥–∞ —Å–ª—É—à–∞–µ—Ç—Å—è",
"–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞. –¢—ã –¥–æ—Å—Ç–∞–≤—â–∏–∫ –µ–¥—ã, –ø—Ä–∏–Ω–µ—Å –µ–¥—É, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä - –∑–∞–∫–∞–∑—ã–≤–∞–ª, –Ω–æ –µ–º—É —Å–æ–≤—Å–µ–º –Ω–µ—á–µ–º –ø–ª–∞—Ç–∏—Ç—å.",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º –≤ –ø–æ–∑–µ –ª–æ—Ç–æ—Å–∞",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º —Å–∏–¥—è –Ω–∞ —Å—Ç—É–ª–µ. –ö–∞—Ç—è —Å–∞–¥–∏—Ç—Å—è –Ω–∞ –ë–æ—Ä–∏—Å–∞",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º –Ω–∞ —Å—Ç–æ–ª–µ",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç–∞—Ä–æ–π –≤–µ—â–∏",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º —Å—Ç–æ—è",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º –≤ –ø–æ–∑–µ 69",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º –≤ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—Å–∫–æ–π –ø–æ–∑–µ",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º —Å –∑–∞–≤—è–∑–∞–Ω–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º –±–µ–∑ —Ä—É–∫",
"–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∂–µ—Å—Ç–∫–∏–π —Ç—Ä–∞—Ö –≤ –≥–æ—Ä–ª–æ. –î–ª—è —ç—Ç–æ–≥–æ –ö–∞—Ç—è –ª–æ–∂–∏—Ç—Å—è –Ω–∞ —É–≥–æ–ª –∫—Ä–æ–≤–∞—Ç–∏",
"–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç. –î–ª—è —ç—Ç–æ–≥–æ –ö–∞—Ç—è –ª–æ–∂–∏—Ç—Å—è –Ω–∞ —É–≥–æ–ª –∫—Ä–æ–≤–∞—Ç–∏",
"–ó–∞–π–º–∏—Ç–µ—Å—å —Å–µ–∫—Å–æ–º —Ä–∞–∫–æ–º"   
]

# ----------------------------
# üéâ –°–¢–ò–ö–ï–† –ü–û–ë–ï–î–´
# ----------------------------

WIN_STICKER = "BQACAgIAAxkBAAIBRmRvUq7tqX5hRZJ7z9d9J0oqV1c3AAJiAAMgBAFLhBDJ0Ko35ugeBA"

# ----------------------------
# üñºÔ∏è –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–†–¢–ò–ù–´ –ö–ê–†–¢–´ –° –ù–ê–î–ü–ò–°–Ø–ú–ò
# ----------------------------

def generate_board_image(p1_pos, p2_pos):
    cell_size = 60
    width = height = cell_size * 10
    img = Image.new("RGB", (width, height), "white")
    draw = ImageDraw.Draw(img)

    colors = {
        "start": "#4CAF50",
        "green": "#C8E6C9",
        "yellow": "#FFF9C4",
        "red": "#FFCDD2",
        "blue": "#BBDEFB",
        "purple": "#E1BEE7",
        "black": "#212121",
        "gold": "#FFD54F",
        "end": "#90A4AE"
    }

    for i in range(100):
        row = 9 - (i // 10)
        col = i % 10
        if (i // 10) % 2 == 1:
            col = 9 - col

        x0, y0 = col * cell_size, row * cell_size
        x1, y1 = x0 + cell_size, y0 + cell_size

        if i == 0:
            color = colors["start"]
        elif i == 99:
            color = colors["end"]
        else:
            cell = BOARD[i]
            color = colors.get(cell["color"], "white")

        draw.rectangle([x0, y0, x1, y1], fill=color, outline="black")
        if i < 99:
            draw.text((x0 + 5, y0 + 5), str(i), fill="black")

        # –ù–∞–¥–ø–∏—Å–∏ –Ω–∞ –æ—Å–æ–±—ã—Ö —è—á–µ–π–∫–∞—Ö
        cell = BOARD[i]
        label = ""
        if cell["type"] == "prison":
            label = "–¢–Æ–†–¨–ú–ê"
            fill = "white"
        elif cell["type"] == "gift":
            label = "–ü–†–ò–ó"
            fill = "black"
        elif cell["type"] == "chaos":
            label = "–•–ê–û–°"
            fill = "white"

        if label:
            bbox = draw.textbbox((0, 0), label)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            tx = x0 + (cell_size - text_width) // 2
            ty = y0 + (cell_size - text_height) // 2 - 5
            draw.text((tx, ty), label, fill=fill, font=None)

    # –ò–≥—Ä–æ–∫–∏
    for pos, color in [(p1_pos, "red"), (p2_pos, "blue")]:
        if pos < 100:
            row = 9 - (pos // 10)
            col = pos % 10
            if (pos // 10) % 2 == 1:
                col = 9 - col
            x, y = col * cell_size, row * cell_size
            draw.ellipse([x + 20, y + 20, x + 40, y + 40], fill=color)

    # –ü–æ–¥–ø–∏—Å–∏
    draw.text((10, height - 30), "üü¢ –°–¢–ê–†–¢", fill="green")
    draw.text((width - 100, 10), "üèÅ –§–ò–ù–ò–®", fill="gray")

    bio = BytesIO()
    img.save(bio, "PNG")
    bio.seek(0)
    return bio

# ----------------------------
# üéÆ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ----------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start")

    keyboard = [
        [InlineKeyboardButton("üì± –ù–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ", callback_data="mode_local")],
        [InlineKeyboardButton("üåç –ù–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏", callback_data="mode_remote")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üéÆ –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
        reply_markup=reply_markup
    )

async def select_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    mode = "local" if query.data == "mode_local" else "remote"
    context.user_data["mode"] = mode

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    context.user_data["game_started"] = True
    context.user_data["player1_pos"] = 0
    context.user_data["player2_pos"] = 0
    context.user_data["current_player"] = 1
    context.user_data["player1_in_torture"] = False
    context.user_data["player2_in_torture"] = False
    context.user_data["player1_gift"] = False
    context.user_data["player2_gift"] = False

    context.user_data["used_phrases"] = []
    context.user_data["used_challenges_yellow"] = []
    context.user_data["used_challenges_red"] = []

    player1_name = "–ö–∞—Ç—è"
    player2_name = "–ë–æ—Ä–∏—Å"
    current_name = player1_name if context.user_data["current_player"] == 1 else player2_name

    board_img = generate_board_image(context.user_data["player1_pos"], context.user_data["player2_pos"])
    await query.message.reply_photo(
        photo=board_img,
        caption=(
            f"üìç –ü–æ–∑–∏—Ü–∏–∏:\n"
            f"üî¥ {player1_name} ‚Äî {context.user_data['player1_pos']}\n"
            f"üîµ {player2_name} ‚Äî {context.user_data['player2_pos']}\n\n"
            f"üéÆ –•–æ–¥–∏—Ç: {'üî¥ ' + player1_name if context.user_data['current_player'] == 1 else 'üîµ ' + player2_name}"
        ),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="roll_dice")]
        ])
    )

async def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫'")

    data = context.user_data
    current_player = data["current_player"]
    pos_key = "player1_pos" if current_player == 1 else "player2_pos"
    torture_key = "player1_in_torture" if current_player == 1 else "player2_in_torture"
    gift_key = "player1_gift" if current_player == 1 else "player2_gift"

    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞ –∏ —Ä–æ–¥ ---
    player1_name = "–ö–∞—Ç—è"
    player2_name = "–ë–æ—Ä–∏—Å"
    current_name = player1_name if current_player == 1 else player2_name

    throw_verb = "–±—Ä–æ—Å–∏–ª–∞" if current_name == "–ö–∞—Ç—è" else "–±—Ä–æ—Å–∏–ª"
    win_verb = "–≤—ã–∏–≥—Ä–∞–ª–∞" if current_name == "–ö–∞—Ç—è" else "–≤—ã–∏–≥—Ä–∞–ª"
    skip_verb = "–≤—ã—à–ª–∞" if current_name == "–ö–∞—Ç—è" else "–≤—ã—à–µ–ª"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ —Ç—é—Ä—å–º–µ?
    if data.get(torture_key, False):
        logger.info(f"{current_name} –≤ —Ç—é—Ä—å–º–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥ –∏ —Å–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –æ–¥–µ–∂–¥—ã!")
        data[torture_key] = False
        await query.edit_message_text(f"‚õìÔ∏è {current_name} –±—ã–ª(–∞) –≤ —Ç—é—Ä—å–º–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!\nüîì –¢–µ–ø–µ—Ä—å —Ç—ã —Å–≤–æ–±–æ–¥–µ–Ω(–∞)!")
        return  # ‚ùå –•–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω, –ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    # üé≤ –ê–ù–ò–ú–ê–¶–ò–Ø –ö–£–ë–ò–ö–ê
    dice_msg = await query.message.reply_dice(emoji="üé≤")
    dice_value = dice_msg.dice.value
    logger.info(f"–í—ã–ø–∞–ª–æ: {dice_value}")

    old_pos = data[pos_key]
    new_pos = old_pos + dice_value

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±—Ä–æ—Å–∫–µ
    await query.message.reply_text(
        f"{'üî¥ ' + player1_name if current_player == 1 else 'üîµ ' + player2_name} {throw_verb} –∫—É–±–∏–∫: üé≤ {dice_value}\n"
        f"–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å —Å {old_pos} ‚Üí {new_pos}"
    )

    # –ü–û–ë–ï–î–ê
    if new_pos >= 100:
        winner = player1_name if current_player == 1 else player2_name
        win_verb_winner = "–≤—ã–∏–≥—Ä–∞–ª–∞" if winner == "–ö–∞—Ç—è" else "–≤—ã–∏–≥—Ä–∞–ª"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë: —Ç–µ–∫—Å—Ç, —Å—Ç–∏–∫–µ—Ä, –∫–Ω–æ–ø–∫—É
        await query.message.reply_sticker(sticker=WIN_STICKER)

        await query.message.reply_text(
            f"üéâ –ü–û–ë–ï–î–ê! {winner} {win_verb_winner} –∏ –ø—Ä–æ—à–ª–∞ –≤—Å—é –∫–∞—Ä—Ç—É!\n\n"
            f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {winner} ‚Äî –¢–µ–ø–µ—Ä—å —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å, —á—Ç–æ –≤–∞–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ!\n\n"
            f"–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")]
            ])
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    data[pos_key] = new_pos
    cell = BOARD[new_pos]

    # üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏
    message = ""
    if cell["type"] == "phrase":
        unused = [p for p in PHRASES_GREEN if p not in data["used_phrases"]]
        if not unused:
            phrase = random.choice(PHRASES_GREEN)
            message = f"üü¢ <b>–í—Å–µ —Ñ—Ä–∞–∑—ã —É–∂–µ –±—ã–ª–∏! –ù–æ –≤–æ—Ç –µ—â—ë –æ–¥–Ω–∞:</b>\n\n<b>{phrase}</b>"
        else:
            phrase = random.choice(unused)
            data["used_phrases"].append(phrase)
            message = f"üü¢ <b>–ó–µ–ª—ë–Ω–∞—è —è—á–µ–π–∫–∞! –õ–∞–π—Ç-—á–ª–µ–Ω–∂:</b>\n\n<b>{phrase}</b>"

    elif cell["type"] == "challenge":
        unused = [c for c in CHALLENGES_YELLOW if c not in data["used_challenges_yellow"]]
        if not unused:
            challenge = random.choice(CHALLENGES_YELLOW)
            message = f"üü° <b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –±—ã–ª–∏! –ù–æ –≤–æ—Ç –Ω–æ–≤–æ–µ:</b>\n\n<b>{challenge}</b>"
        else:
            challenge = random.choice(unused)
            data["used_challenges_yellow"].append(challenge)
            message = f"üü° <b>–ñ—ë–ª—Ç–∞—è —è—á–µ–π–∫–∞! –ß–ª–µ–Ω–∂:</b>\n\n<b>{challenge}</b>"

    elif cell["type"] == "sexy_challenge":
        unused = [c for c in CHALLENGES_RED if c not in data["used_challenges_red"]]
        if not unused:
            challenge = random.choice(CHALLENGES_RED)
            message = f"üî¥ <b>–í—Å–µ –∫—Ä–∞—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –±—ã–ª–∏! –ù–æ –≤–æ—Ç –Ω–æ–≤–æ–µ:</b>\n\n<b>{challenge}</b>"
        else:
            challenge = random.choice(unused)
            data["used_challenges_red"].append(challenge)
            message = f"üî¥ <b>–ö—Ä–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞! –°–µ–∫—Å-—á–ª–µ–Ω–∂:</b>\n\n<b>{challenge}</b>"

    elif cell["type"] == "back7":
        back_pos = max(new_pos - 7, 0)
        data[pos_key] = back_pos
        message = f"üåÄ <b>{cell['text']} –¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ {back_pos}.</b>"

    elif cell["type"] == "back15":
        back_pos = max(new_pos - 15, 0)
        data[pos_key] = back_pos
        message = f"‚ö†Ô∏è <b>{cell['text']} –¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ {back_pos}.</b>"

    elif cell["type"] == "prison":
        message = f"‚õìÔ∏è <b>{cell['text']}</b>"
        data[torture_key] = True

    elif cell["type"] == "gift":
        message = f"üéÅ <b>{cell['text']}</b>"
        data[gift_key] = True

    elif cell["type"] == "chaos":
        effects = [
            "–ü—Ä–æ–ø—É—Å—Ç–∏ —Ö–æ–¥!",
            "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Å—å –Ω–∞ +5!",
            "–ü–æ–ª—É—á–∏ –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–∫–∞–∑!",
            "–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞!",
            "–°–Ω–∏–º–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –æ–¥–µ–∂–¥—ã!",
            "–°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—É!"
        ]
        effect = random.choice(effects)
        message = f"üåÄ <b>{cell['text']}</b>\n\nüé≤ <b>–≠—Ñ—Ñ–µ–∫—Ç: {effect}</b>"

        if "–ü—Ä–æ–ø—É—Å—Ç–∏ —Ö–æ–¥" in effect:
            data[torture_key] = True
        elif "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Å—å –Ω–∞ +5" in effect:
            data[pos_key] += 5
        elif "–ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–∫–∞–∑" in effect:
            data[gift_key] = True
        elif "–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞" in effect:
            extra = random.choice(PHRASES_GREEN)
            message += f"\n\nüéØ <b>–í—ã–ø–æ–ª–Ω–∏: {extra}</b>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å HTML
    if message:
        await query.message.reply_text(message, parse_mode='HTML')

    # üñºÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
    p1_pos = data["player1_pos"]
    p2_pos = data["player2_pos"]
    board_img = generate_board_image(p1_pos, p2_pos)

    # –ü–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥
    data["current_player"] = 2 if current_player == 1 else 1
    next_player = data["current_player"]
    next_name = player1_name if next_player == 1 else player2_name

    await query.message.reply_photo(
        photo=board_img,
        caption=(
            f"üìç –ü–æ–∑–∏—Ü–∏–∏:\n"
            f"üî¥ {player1_name} ‚Äî {p1_pos}\n"
            f"üîµ {player2_name} ‚Äî {p2_pos}\n\n"
            f"üéÆ –•–æ–¥–∏—Ç: {'üî¥ ' + player1_name if next_player == 1 else 'üîµ ' + player2_name}"
        ),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="roll_dice")]
        ])
    )

async def restart_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!")
    await select_mode(update, context)

# ----------------------------
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ----------------------------

def main():
    import os
    TOKEN = os.getenv("8201451808:AAEhW6kCFp688jI1ijULM7DahwSawQ_E3rc")

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(select_mode, pattern="^mode_"))
    application.add_handler(CallbackQueryHandler(roll_dice, pattern="^roll_dice$"))
    application.add_handler(CallbackQueryHandler(restart_game, pattern="^restart$"))

    logger.info("üéÆ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è")
    application.run_polling()

# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
if __name__ == "__main__":
    main()
